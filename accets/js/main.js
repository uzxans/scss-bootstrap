

flatpickr("#daterange", {
  mode: "range",
  dateFormat: "Y-m-d", // —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
  locale: "ru",        // —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
  onChange: function(selectedDates, dateStr, instance) {
    // selectedDates = –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
    if (selectedDates.length === 2) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É "–æ—Ç - –¥–æ"
      const from = instance.formatDate(selectedDates[0], "Y-m-d");
      const to = instance.formatDate(selectedDates[1], "Y-m-d");
      const value = `${from} ‚Äî ${to}`;

      // —Ç–∞–± (–Ω–∞–ø—Ä–∏–º–µ—Ä, "date")
      const tab = instance.input.closest(".tab-content").id;

      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–≤–æ—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
      handleSelection(value, tab);
    }
  }
});



// const startDate = document.getElementById('start-date');
// const endDate = document.getElementById('end-date');

// startDate.addEventListener('change', function() {
//   endDate.min = this.value;
// });



document.addEventListener('click', (e) => {
  if (e.target.closest('.btn_menu')) {
    const sidebar = e.target.closest('.sidebar');
    sidebar.classList.toggle('activeSidebar');
  }
});


document.addEventListener('click', (e) => {
  if (e.target.closest('.btn_menu_mob')) {
    const sidebar = e.target.closest('.sidebar');
    sidebar.classList.toggle('sidebar_activ_mob');
  }
});






const filterInput = document.getElementById("filterInput");
const dropdown = document.getElementById("dropdown");
const toggleBtn = document.getElementById("toggleBtn");
const tabs = document.querySelectorAll(".tabs button");
const tabContents = document.querySelectorAll(".tab-content");
const tagsContainer = document.getElementById("tags");

// –Ω–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
const employees = [
  { id: 1, name: "–¢–∏–º—É—Ä", status: "–†–∞–±–æ—Ç–∞–µ—Ç", object: "–û–±—É—Ö–æ–≤–∞", metro: "–°–∞–¥–æ–≤–∞—è" },
  { id: 2, name: "–ú–∞—Ä–∏—è", status: "–ù–∞–ø–æ–º–Ω–∏—Ç—å", object: "–í–∏–∫—Ç–æ—Ä–∏—è", metro: "–û–±—É—Ö–æ–≤–∞" },
  { id: 3, name: "–ê–ª–µ–∫—Å–µ–π", status: "–†–µ–∑–µ—Ä–≤", object: "–û–±—É—Ö–æ–≤–∞", metro: "–°–∞–¥–æ–≤–∞—è" },
  { id: 4, name: "–û–ª—å–≥–∞", status: "–£–≤–æ–ª–µ–Ω", object: "–í–∏–∫—Ç–æ—Ä–∏—è", metro: "–û–±—É—Ö–æ–≤–∞" }
];

// –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
let activeFilters = { status: [], object: [], metro: [] };

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ input –∏–ª–∏ –∫–Ω–æ–ø–∫—É
filterInput.addEventListener("click", (e) => {
  e.stopPropagation();
  dropdown.classList.add("open");
});

toggleBtn.addEventListener("click", (e) => {
  e.stopPropagation();
  dropdown.classList.toggle("open");
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
tabs.forEach(tab => {
  tab.addEventListener("click", () => {
    tabs.forEach(t => t.classList.remove("active"));
    tab.classList.add("active");

    tabContents.forEach(c => c.classList.remove("active"));
    document.getElementById(tab.dataset.tab).classList.add("active");
  });
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
function handleSelection(value, tab) {
  if (!activeFilters[tab]) activeFilters[tab] = [];

  if (value === "–í—Å–µ") {
    activeFilters[tab] = [];
    clearTags(tab);
  } else if (!activeFilters[tab].includes(value) && value !== "–í—ã–±—Ä–∞—Ç—å") {
    activeFilters[tab].push(value);
    addTag(value, tab);
  }

  renderBoard();
}

// –í–∞—Ä–∏–∞–Ω—Ç 1: –µ—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞—é—Ç—Å—è –∫–ª–∏–∫–∏ –ø–æ .option
document.querySelectorAll(".option").forEach(option => {
  option.addEventListener("click", () => {
    const value = option.dataset.value;
    const tab = option.closest(".tab-content").id;
    handleSelection(value, tab);
  });
});

// –í–∞—Ä–∏–∞–Ω—Ç 2: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö <select>
document.querySelectorAll(".tab-content select").forEach(select => {
  select.addEventListener("change", () => {
    const selected = select.options[select.selectedIndex];
    const value = selected.dataset.value || selected.value; // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç data-value
    const tab = select.closest(".tab-content").id;
    handleSelection(value, tab);
  });
});

// –í–∞—Ä–∏–∞–Ω—Ç 3: –¥–ª—è <input>
document.querySelectorAll(".name input").forEach(input => {
  input.addEventListener("change", () => {
    const value = input.value.trim();
    const tab = input.closest(".name").id;
    handleSelection(value, tab);
  });
});


// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—ç–≥–∞
function addTag(value, tab) {
  if ([...tagsContainer.children].some(tag => tag.dataset.value === value)) return;

  const tag = document.createElement("div");
  tag.className = "tag";
  tag.dataset.value = value;
  tag.dataset.tab = tab;
  tag.innerHTML = `${value} <span class="remove">√ó</span>`;

  tag.querySelector(".remove").addEventListener("click", () => {
    tag.remove();
    activeFilters[tab] = activeFilters[tab].filter(v => v !== value);
    renderBoard();
  });

  tagsContainer.appendChild(tag);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ —Ç–∞–±–∞
function clearTags(tab) {
  [...tagsContainer.children]
    .filter(tag => tag.dataset.tab === tab)
    .forEach(tag => tag.remove());
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
document.addEventListener("click", (e) => {
  if (!filterInput.contains(e.target) && !dropdown.contains(e.target)) {
    dropdown.classList.remove("open");
  }
});

// ====================
// –†–µ–Ω–¥–µ—Ä kanban –¥–æ—Å–∫–∏
// ====================
function renderBoard() {
  document.querySelectorAll(".column .cards").forEach(c => c.innerHTML = "");

  employees.forEach(emp => {
    if (!passFilters(emp)) return;

    const col = document.querySelector(`.column[data-status="${emp.status}"] .cards`);
    if (!col) return;

    const card = document.createElement("div");
    card.className = "card";
    card.draggable = true;
    card.innerText = emp.name;
    card.dataset.id = emp.id;

    card.addEventListener("dragstart", e => {
      e.dataTransfer.setData("id", emp.id);
    });

    col.appendChild(card);
  });
}

// –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function passFilters(emp) {
  if (activeFilters.status.length && !activeFilters.status.includes(emp.status)) return false;
  if (activeFilters.object.length && !activeFilters.object.includes(emp.object)) return false;
  if (activeFilters.metro.length && !activeFilters.metro.includes(emp.metro)) return false;
  return true;
}

// Drag & Drop
document.querySelectorAll(".column").forEach(col => {
  col.addEventListener("dragover", e => e.preventDefault());
  col.addEventListener("drop", e => {
    const id = e.dataTransfer.getData("id");
    const emp = employees.find(e => e.id == id);
    emp.status = col.dataset.status;
    renderBoard();
  });
});



function renderBoard() {
  // –æ—á–∏—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
  document.querySelectorAll(".column .cards").forEach(c => c.innerHTML = "");

  // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
  employees.forEach(emp => {
    if (!passFilters(emp)) return;
    const col = document.querySelector(`.column[data-status="${emp.status}"] .cards`);
    if (!col) return;

    const card = document.createElement("div");
    card.className = "card";
    card.draggable = true;
    card.innerText = emp.name;
    card.dataset.id = emp.id;

    card.addEventListener("dragstart", e => {
      e.dataTransfer.setData("id", emp.id);
    });

    col.appendChild(card);
  });

  // üîπ —Å–∫—Ä—ã–≤–∞—Ç—å/–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É —Å—Ç–∞—Ç—É—Å–∞
  document.querySelectorAll(".column").forEach(col => {
    if (activeFilters.status.length === 0 || activeFilters.status.includes(col.dataset.status)) {
      col.style.display = ""; // –ø–æ–∫–∞–∑–∞—Ç—å
    } else {
      col.style.display = "none"; // —Å–∫—Ä—ã—Ç—å
    }
  });
}


// —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
renderBoard();


